version: 2
jobs:
  docker-build-backend:
    working_directory: ~/app
    docker: 
      - image: alpine 
    steps:
      - checkout
      - run:
          name: Install Sudo
          command: |
            apk update && apk add sudo && apk add shadow && apk add openrc
      - run: 
          name: Add User
          command: |
            echo "Set disable_coredump false" >> /etc/sudo.conf
            sudo addgroup docker
            sudo usermod -aG docker $(whoami)
      - run:
          name: Install Docker Client
          command: apk add docker-cli && apk add docker
      - run:
          name: Docker Start
          command: |
            nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2&
            timeout -t 15 sh -c "until docker info; do echo .; sleep 1; done"
            sudo dockerd
      - run:
          name: Docker Build
          command: docker build -t dillonkyle/backend:initialPush ./backend
      - run:
          name: Test Backend Communication
          command: docker run dillonkyle/backend npm test
      - run:
          name: Docker Login
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run:
          name: Docker Push
          command: docker push dillonkyle/backend:latest
  docker-build-frontend:
    working_directory: ~/app
    docker: 
      - image: dillonkyle/frontend:initialPush     
    steps:
      - checkout
      - run:
          name: Instll Docker Client
          command: yum install docker-ce-cli
      - run:
          name: Docker Build
          command: docker build -t dillonkyle/frontend:initialPush ./frontend
      - run:
          name: Test Frontend Communication
          command: docker run dillonkyle/frontend npm test
      - run:
          name: Docker Login
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run:
          name: Docker Push
          command: docker push dillonkyle/frontend:latest
  deploy-aws:
    working_directory: ~/app
    docker:
      - image: circleci/python:latest
    environment:
      - DEV_ENV: NodeWebApp-env
      - DEPLOY_BUCKET: elasticbeanstalk-us-east-2-449726727538
      - APP_NAME: NodeWebApp
      - REGION: us-east-2
    steps:
      - checkout
      - run: 
          name: Installing AWSCLI
          command: |
            sudo pip install awsebcli --upgrade
            sudo pip install awscli --upgrade
      - run: 
          name: Create AWS credentials
          command: |
            mkdir ~/.aws
            touch ~/.aws/config
            chmod 600 ~/.aws/config
            echo "[profile eb-cli]" > ~/.aws/config
            echo "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/config
            echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/config
      - run:
          name: "Upload to S3 DEPLOY_BUCKET"
          command: |
            zip -r node-dev-app-${CIRCLE_BUILD_NUM}.zip .
            aws s3 cp node-dev-app-${CIRCLE_BUILD_NUM}.zip s3://${DEPLOY_BUCKET}
            aws elasticbeanstalk create-application-version --application-name ${APP_NAME} \
                --version-label node-dev-app-${CIRCLE_BUILD_NUM} --source-bundle S3Bucket=${DEPLOY_BUCKET},S3Key="node-dev-app-${CIRCLE_BUILD_NUM}.zip" --region ${REGION}
            aws elasticbeanstalk update-environment --application-name ${APP_NAME} \
                --environment-name ${DEV_ENV} --version-label node-dev-app-${CIRCLE_BUILD_NUM} --region ${REGION}
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - docker-build-backend
      - docker-build-frontend:
          requires:
            - docker-build-backend
      - deploy-aws:
          requires:
            - docker-build-frontend
